Screen 是什么?
    Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。

Screen 有什么用?
    和tmux有一个相同的功能-多会话,当我们远程登录服务器操作时,进入screen后,直接关掉ssh客户端是不结束执行的任务的,还有个比较好玩的功能,屏幕共享,这个我在树莓派+kindle上使用过,通过屏幕wifi登录树莓派,自动打开屏幕共享,就可以直接在kindle上查看你的键盘操作了,详情搜索"树莓派+kindle"

会话恢复

    只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。这一点和图形界面下的VNC很相似.

多窗口

    在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。Screen实现了基本的文本操作，如复制粘贴等；还提供了类似滚动条的功能，可以查看窗口状况的历史记录。窗口还可以被分区和命名，还可以监视后台窗口的活动。 会话共享 Screen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出）。它同时提供了窗口访问权限的机制，可以对窗口进行密码保护。

语法
    # screen [-AmRvx -ls -wipe][-d <作业名称>][-h <行数>][-r <作业名称>][-s ][-S <作业名称>]

选项

    -A 　将所有的视窗都调整为目前终端机的大小。
    -d <作业名称> 　将指定的screen作业离线。
    -h <行数> 　指定视窗的缓冲区行数。
    -m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。
    -r <作业名称> 　恢复离线的screen作业。
    -R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。
    -s 　指定建立新视窗时，所要执行的shell。
    -S <作业名称> 　指定screen作业的名称。
    -v 　显示版本信息。
    -x 　恢复之前离线的screen作业。
    -ls或--list 　显示目前所有的screen作业。
    -wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业

常用screen参数

    screen -S yourname -> 新建一个叫yourname的session
    screen -ls -> 列出当前所有的session
    screen -r yourname -> 回到yourname这个session
    screen -d yourname -> 远程detach某个session
    screen -d -r yourname -> 结束当前session并回到yourname这个session

在每个screen session 下，所有命令都以 ctrl+a(C-a) 开始。

    C-a ? -> 显示所有键绑定信息
    C-a c -> 创建一个新的运行shell的窗口并切换到该窗口
    C-a n -> Next，切换到下一个 window 
    C-a p -> Previous，切换到前一个 window 
    C-a 0..9 -> 切换到第 0..9 个 window
    Ctrl+a [Space] -> 由视窗0循序切换到视窗9
    C-a C-a -> 在两个最近使用的 window 间切换 
    C-a x -> 锁住当前的 window，需用用户密码解锁
    C-a d -> detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 
    C-a z -> 把当前session放到后台执行，用 shell 的 fg 命令则可回去。
    C-a w -> 显示所有窗口列表
    C-a t -> time，显示当前时间，和系统的 load 
    C-a k -> kill window，强行关闭当前的 window
    C-a [ -> 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样
        C-b Backward，PageUp 
        C-f Forward，PageDown 
        H(大写) High，将光标移至左上角 
        L Low，将光标移至左下角 
        0 移到行首 
        $ 行末 
        w forward one word，以字为单位往前移 
        b backward one word，以字为单位往后移 
        Space 第一次按为标记区起点，第二次按为终点 
        Esc 结束 copy mode 
    C-a ] -> paste，把刚刚在 copy mode 选定的内容贴上

@see http://man.linuxde.net/screen

屏幕分割

现在显示器那么大，将一个屏幕分割成不同区域显示不同的Screen窗口显然是个很酷的事情。可以使用快捷键C-a S将显示器水平分割，Screen 4.00.03版本以后，也支持垂直分屏，快捷键是C-a |。分屏以后，可以使用C-a <tab>在各个区块间切换，每一区块上都可以创建窗口并在其中运行进程。

可以用C-a X快捷键关闭当前焦点所在的屏幕区块，也可以用C-a Q关闭除当前区块之外其他的所有区块。关闭的区块中的窗口并不会关闭，还可以通过窗口切换找到它。

会话锁定与解锁

Screen允许使用快捷键C-a s锁定会话。锁定以后，再进行任何输入屏幕都不会再有反应了。但是要注意虽然屏幕上看不到反应，但你的输入都会被Screen中的进程接收到。快捷键C-a q可以解锁一个会话。

也可以使用C-a x锁定会话，不同的是这样锁定之后，会话会被Screen所属用户的密码保护，需要输入密码才能继续访问这个会话

更多screen功能

同大多数UNIX程序一样，GNU Screen提供了丰富强大的定制功能。你可以在Screen的默认两级配置文件/etc/screenrc和$HOME/.screenrc中指定更多，例如设定screen选项，定制绑定键，设定screen会话自启动窗口，启用多用户模式，定制用户访问权限控制等等。如果你愿意的话，也可以自己指定screen配置文件。

以多用户功能为例，screen默认是以单用户模式运行的，你需要在配置文件中指定multiuser on 来打开多用户模式，通过acl*（acladd,acldel,aclchg...）命令，你可以灵活配置其他用户访问你的screen会话。更多配置文件内容请参考screen的man页。

===== 常用命令  =====
创建一个新的窗口
    screen -S david 
    还有一种方式: screen vi david.txt ,当退出vi时将退出会话窗口

创建窗口
    C-a c 

切换窗口
    C-a n 下一个
    C-a p 上一个
    C-a 0-9
    C-a 空格
    C-a C-a -> 在两个最近使用的 window 间切换 


程序退出后，结束screen会话的方式
    screen vi david.txt 当vim退出时，screeen自动退出

查看窗口和窗口名称
    Ctrl + a "
设置当前窗口title
    Ctrl + a A
分屏
    水平 Ctrl + a S
    垂直 Ctrl + a | (4.00.03之后之支持 )
    切换分屏 Ctrl + a <tab>
    关闭分屏 Ctrl + a X  (窗口会话不会关闭，可以通过其他窗口找到他)
    关闭分屏 Ctrl + a Q  (窗口会话不会关闭，可以通过其他窗口找到他)
    
会话分离与恢复
    Ctrl + a d 分离回话
    Ctrl + a z 把当前session放到后台执行，用 shell 的 fg 命令则可回去。
    screen -r Session name  恢复到前台
    screen -d Session name  将Session name会话分离，当时ssh网络中断时，会话会处于激活状态，此时不能直接-r恢复，但可增加-d参数，如 screen -dr session 分离会话，并在当前激活会话

鼠标滚轮翻页
    Ctrl+a [  或者 Ctrl + a <ESC>
    退出 Ctrl+c
复制粘贴
    进入移动光标模式 Ctrl+a [  或者 Ctrl + a <ESC> (此模式操作与vim操作类似)
    空格键设置开始标记
    空格键设置结束标记
粘贴 Ctrl + a ] 

关闭或杀死一个窗口
    C-a k
清除dead会话,如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话）,这时screen -list会显示该会话为dead状态
    screen -wipe
退出所有窗口
    C-a : 输入 quit

== = = = = = = = = = = 
.bash_profile 不生效的问题
screen 默认加载的文件为 .bashrc ，而不是 .bash_profile

