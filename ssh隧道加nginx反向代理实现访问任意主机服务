实现原理
web服务器（内网主机）通过 ssh(外网服务器)转发监听端口，在ssh主机上，配置nginx反向代理到转发的监听端口，实现代码如下

web server实现：
1.内网主机：ssh -qnfNT -g -R 3380:localhost:80 myaliyun  
2.外网服务器nginx配置：
    server {
    	listen 3480 ;
     	location / {
     	       proxy_redirect off;
     	       proxy_set_header Host $host;
     	       proxy_set_header X-Real-IP $remote_addr;
     	       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
     	       proxy_pass http://127.0.0.1:3380;
     	   }
    }

测试方式： curl http://myaliyun:3480
需要注意的是，外网服务器需要开启对应的端口白名单，我用的阿里云是白名单模式，所以需要添加白名单

ssh server实现
1.内网主机：ssh -qnfNT -g -R 3322:localhost:22 myaliyun  
2.外网服务器： ssh localhost -p 3322

为了方便链接，可在服务端配置.ssh/config 文件
 cat <<EOF >> .ssh/config
Host mywork
HostName localhost
User songyue
Port 3322
EOF

然后上传公钥到内网服务器
    ssh-copy-id mywork 
现在就可以直接输入 ssh mywork 登录到我的内网电脑了

===================================
和qq群的网友讨论后发现一个更好的ssh代理方案,使用nginx的stream模块实现,配置如下
nginx.conf 文件添加

stream {
        upstream ssh {
                server 127.0.0.1:3322;
        }
        server {
                listen 3422;
                proxy_pass ssh;
                proxy_connect_timeout 1h;
                proxy_timeout 1h;
        }
}

然后本地使用 ssh myaliyun -p 3422 即可登录
修改.ssh/config,添加如下
    Host workpc
    HostName myaliyun
    Port 3422

之后使用 ssh workpc 即可登录公司主机了


========= 20180930 更新


最近使用阿里云vps+ssh+nginx代理,实现可以在任意地方访问公司电脑任何服务,今天突然想在加个web站点访问,
按照之前的方法,我需要在开个端口,如果加很多站,那就会变得很麻烦,所以我想使用nginx的host变量,
实现一个端口号访问多站点的功能,我想了下,只需要在nginx加个判断,根据cookie来设置host参数就可以解决了,
我创建了一个php文件,用来显示站点列表,和切换站点功能,另外nginx部分直接看下面的配置吧,

nginx配置文件:

server {
        
	root /var/www/html; #如果全是代理转发,root可不设置,这里是为了访问sitelist.php 使用
	listen 3480 ;
	set $target_host $host; #设置一个变量,默认值为当前host,这样就兼容了本地绑定host方式访问
    
    # 这里是判断cookice的地方,每增加一个站点需要写一个判断
    # 如果这里使用正则的话,就不需要每次添加了,以后在研究如何使用正则
	if ($http_cookie ~ 'target_host=yaf_app.local') {
	    set $target_host 'yaf_app.local';
  	}

    # 站点列表页面
    location ~ ^/sitelist.php$ {
	   include fastcgi_params;
	   fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
	   fastcgi_pass 127.0.0.1:9000;
	   #fastcgi_pass unix:/var/run/php5-fpm.sock;
	   try_files $uri =404;
   	 }	

 	location / {
 	       proxy_redirect off;
 	       proxy_set_header Host $target_host; # 改成使用我们的变量
 	       #proxy_set_header Host $host; # 原来的配置
 	       proxy_set_header X-Real-IP $remote_addr;
 	       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 	       proxy_pass http://127.0.0.1:3380;
 	   }
	
}

========= 20201215 更新
修改sshd的配置，可省略nginx代理，直接暴露端口到外网ip
#GatewayPorts no  # 绑定127.0.0.1
#GatewayPorts yes  # 绑定0.0.0.0 
重启sshd
---------
只允许转发不允许登陆的实现方式
服务端创建用户，以proxy用户为例
adduser proxy
vim /etc/passwd
    修改前
    proxy:x:1003:1005:proxy,,,:/home/proxy:/bin/bash
    修改后
    proxy:x:1003:1005::/home/proxy:/usr/sbin/nologin

然后客户端(内网服务器)连接方式
 ssh -R 2022:127.0.0.1:22 192.168.1.168 -N
-N 不执行远程命令

这样就可以直接 ssh songyue@192.168.1.168 -p 2022 访问到内网服务器了
---------
我目前有个使用场景是，公司内的电脑装了一台虚拟机，里面运行开发环境，联网方式为 共享主机网络联网，实体机网络无法访问，这样虚拟机也相对安全
然后虚拟机里开启的一个端口转发到外网ip，这样我的客户端（ssh客户端在MacBook）就可以通过外网访问虚拟机了，在公司内应该使用内网效率更高，也更安全，
所以我写了一个脚本，实现虚拟机到ssh -R 到MacBook内网ip的转发功能，然后我的MacBook 直接访问本地的某个端口就能连接到虚拟机了，脚本如下：
macbook 端的脚本：
bogon:~ songyue$ cat /Users/songyue/work/github/linux/remotesh.sh
    #!/bin/bash
    # File Name: remotesh.sh
    # Author: songyue
    # mail: songyue118@gmail.com
    # Created Time: Mon Dec 14 00:37:01 2020
    ipaddr=`ifconfig en0 | grep 192| awk '{print $2}'`
    if test -z $ipaddr
    then
        ipaddr=`ifconfig en0 | grep "192.168"| awk '{print $2}'`
    fi
    ssh workpc "/home/songyue/work/shell/autosshhelper.sh $ipaddr 2022 22"

虚拟机的脚本：
songyue@sy-web:~$ cat /home/songyue/work/shell/autosshhelper.sh
    #!/bin/bash
    # File Name: autosshhelper.sh
    # Author: songyue
    # mail: songyue118@gmail.com
    # Created Time: Sun 13 Dec 2020 04:30:04 PM UTC
    host='127.0.0.1'
    port='22'
    targetHost='192.168.1.168'
    listenPort=2022

    if test -n $1
    then
    targetHost=$1
    fi

    if test -n $2
    then
    listenPort=$2
    fi

    if test -n $3
    then
    prot=$3
    fi

    if test -n $1
    then
    echo "您的主机地址为: $host 需要转发的端口为: $prot 转发到您机器的端口为: $target"
    echo "正在建立内网ssh代理..."
    echo "ssh -R $listenPort:$host:$port $targetHost"
    ps aux |grep  "ssh -R $listenPort" | grep -v 'grep' |awk '{print $2}' | xargs kill
    ssh -R $listenPort:$host:$port $targetHost -N &&
    exit
    else
    echo "请输入参数, 格式: autosshhelper [您的IP] [您监听的端口] [需要访问的服务器的端口] "
    fi

设置个别名 alias sshworkpc='/Users/songyue/work/github/linux/remotesh.sh; ssh sy-web'
直接执行 sshworkpc 即可通过内网登陆虚拟机啦

因为MacBook每天带回家，到公司ip会变，所以用脚本远程执行创建内网连接
这里还有个问题，就是ssh 连接新主机（ip) 默认会有安全确认，远程脚本会卡住，配置一下ssh_config即可
vim /etc/ssh/ssh_config
StrictHostKeyChecking no 

MacBook的ssh/config配置
# 工作电脑，内网访问
Host sy-web
HostName localhost
Port 2022
---------
上面的代理也可以转发其他端口，比如80
 ssh -R 2080:127.0.0.1:80 192.168.1.168 -N 
postman 测试时执行host变量为localhost:3580
不过现在基本都是远程上直接单元测试了
